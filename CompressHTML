/** $VER: Version 0.606b (07 Jan. 2000), by Thorsten Willert
**/
;OPTIONS RESULTS CACHE;SIGNAL ON BREAK_C;SIGNAL ON ERROR;SIGNAL ON HALT;SIGNAL ON SYNTAX;SIGNAL ON IOERR;CALL LIBS();Para.appname='CompressHTML';Para.appinfo='HTML (De)Compressor/Preprozessor';Para.appversion='0.606b';Para.apprelease='3';Para.appdate='07 Jan 2000';Para.applongname=Para.appname Para.appversion||', © 1997-2000 by Thorsten Willert';CALL INIT();DO WHILE(ende ~=TRUE);CALL TR_WAIT(app,'');DO WHILE TR_HANDLEMSG(app,'event');SELECT;WHEN event.trm_class='TRMS_ACTION' THEN;DO;SELECT;WHEN event.trm_id=1 THEN CALL LoadProject();WHEN event.trm_id=2 THEN CALL ResetProject();WHEN (event.trm_id>=50)&(event.trm_id<=60) THEN CALL LoadTempl(event.trm_id);WHEN event.trm_id=8 THEN CALL SaveProject();WHEN event.trm_id=9 THEN CALL SaveAsProject();WHEN event.trm_id=10 THEN CALL DeleteProject();WHEN event.trm_id=19 THEN ende=QUITREQ();WHEN event.trm_id=40 THEN CALL OpenInfoWin();WHEN event.trm_id=41 THEN;DO;CALL LockProg();CALL REQ(PluginInfoText,,'"Installierte Plugins:"');CALL UnLockProg();END;WHEN event.trm_id=45 THEN;DO;CALL LockProg();CALL REQ(ProgrammInfoText,,'"Über:" FLAGS CENTERTEXT');CALL UnLockProg();END;WHEN event.trm_id=99 THEN CALL AutoDatei();WHEN event.trm_id=100 THEN CALL DateiAuswahl();WHEN event.trm_id=111 THEN CALL ZielVerzeichnis();WHEN event.trm_id=150 THEN CALL Start();WHEN event.trm_id=116 THEN CALL ModulUp();WHEN event.trm_id=117 THEN CALL ModulDown();WHEN event.trm_id=118 THEN CALL OpenSelWin();WHEN event.trm_id=119 THEN;DO;CALL LockProg();CALL DelModul();CALL UnLockProg();CALL ModulInformation();END;WHEN event.trm_id=120 THEN CALL ModulON_OFF();WHEN event.trm_id=1001 THEN;DO;CALL TR_CLOSEPROJECT(infowin);infowin=NULL;END;WHEN event.trm_id=3001 THEN CALL AddModul();WHEN event.trm_id=3004 THEN;DO;CALL LockProg();CALL ReplModul();CALL UnLockProg();CALL ModulInformation();END;WHEN event.trm_id=3002 THEN;DO;CALL TR_CLOSEPROJECT(selwin);selwin=NULL;END;OTHERWISE NOP;END;END;WHEN event.trm_class='TRMS_NEWVALUE' THEN;DO;SELECT;WHEN event.trm_id=102 THEN Pattern=TR_GetAttribute(mainwin,102,'TROB_String');WHEN event.trm_id=110 THEN;DO;ZielDir=TR_GetAttribute(mainwin,110,'TROB_String');CALL TestZielDir();END;WHEN event.trm_id=115 THEN CALL ModulInformation();WHEN event.trm_id=3003 THEN CALL ChangeModLst(event.trm_data+1);OTHERWISE NOP;END;END;WHEN event.trm_class='TRMS_CLOSEWINDOW' THEN;DO;IF event.trm_project=mainwin THEN ende=QUITREQ();IF event.trm_project=gaugewin THEN;DO;CALL TR_CLOSEPROJECT(gaugewin);gaugewin=NULL;END;IF event.trm_project=infowin THEN;DO;CALL TR_CLOSEPROJECT(infowin);infowin=NULL;END;IF event.trm_project=selwin THEN;DO;CALL TR_CLOSEPROJECT(selwin);selwin=NULL;END;END;OTHERWISE NOP;END;END;END;CALL Ende();EXIT 0;LoadProject:;CALL LockProg();OldProjekt=Projekt;Projekt='';IF EXISTS(Para.ProjectDir) THEN;DO;Projekt=RqtFileReq('',Para.ProjectDir,'TITLE "Projekt auswählen:" PAT "#?.¶"');IF EXISTS(Projekt)&(Projekt ~=='') THEN;DO;CALL ReadProject(Projekt);CALL StatusText('Neues Projekt geladen.');END;ELSE;DO;Projekt=OldProjekt;CALL REQ('Projektdatei nicht gefunden!',,,);END;CALL NewProject();CALL ModulInformation();END;CALL UnLockProg();RETURN;LoadTempl:;PARSE ARG TemplNr;TemplNr=TemplNr-49;OldProjekt=Projekt;TemplFile=AddPart(Para.ProjectDir,Template.TemplNr);IF EXISTS(TemplFile) THEN;DO;CALL ReadProject(TemplFile);CALL StatusText('Vorlage' Template.TemplNr 'geladen.');CALL NewProject();CALL ModulInformation();END;ELSE;DO;Projekt=OldProjekt;CALL REQ('Vorlage nicht gefunden!',,,);END;RETURN;ResetProject:;Projekt='';Dateien.Drawer='SYS:';ZielDir='RAM:';ModulListe.0=0;Pattern='#?';CALL NewProject();CALL StatusText('');RETURN;NewProject:;CALL SplitPath(Projekt,'out.');ProjectS=out.FilePart;DROP out.;CALL TR_SetAttribute(mainwin,0,'TRWI_TITLE','Projekt: 'ProjectS);CALL TR_SetAttribute(mainwin,110,'TROB_String',ZielDir);CALL TR_SetAttribute(mainwin,101,'TRAT_Text','Keine Datei ausgewählt');CALL TR_SetAttribute(mainwin,115,'TROB_Listview',ModulListe);CALL TR_SetAttribute(mainwin,102,'TROB_String',Pattern);Dateien.0=0;QuelleNEU=1;RETURN;SaveProject:;IF (EXISTS(Projekt))&(Projekt ~=='') THEN CALL WriteProject(Projekt);ELSE CALL StatusText('Kein Projekt geladen!');RETURN;SaveAsProject:;CALL LockProg();NewProjekt=RqtFileReq('',Para.ProjectDir,'TITLE "Projekt speichern:" PAT "#?.¶" FLAGS SAVE');CALL SplitPath(NewProjekt,'out.*');IF (EXISTS(NewProjekt)==1)&(NewProjekt ~=='') THEN;DO;IF REQ('Projekt existiert schon!'||'0A'X||'Überschreiben?','_Nein|_Ja','Rückfrage FLAGS NoReturnKey')==0 THEN;DO;Projekt=NewProjekt;CALL WriteProject(Projekt);CALL NewProject();END;ELSE CALL StatusText('');END;ELSE IF NewProjekt ~=='' THEN CALL WriteProject(NewProjekt);ELSE CALL StatusText('');DROP out.;CALL UnLockProg();RETURN;DeleteProject:;CALL LockProg();DelProjekt=RqtFileReq('',Para.ProjectDir,'TITLE "Projekt löschen:" PAT "#?.¶" FLAGS SAVE');IF (EXISTS(DelProjekt))&(DelProjekt ~=='') THEN;DO;IF REQ('Projekt'||'0A'X||DelProjekt||'0A'X||'wirklich löschen?','_Nein|_Ja','Rückfrage FLAGS NoReturnKey')==0 THEN;DO;CALL Execute('DELETE' DelProjekt 'FORCE','dummy.*');CALL StatusText('Projekt wurde gelöscht.');END;END;CALL UnLockProg();RETURN;DateiAuswahl:;CALL LockProg();QuelleNEU=1;CALL RqtFileReq('',Dateien.Drawer,'TITLE "Datei(en) auswählen:" PAT' Pattern 'STEM Dateien.* Flags MULTI|PATGAD');CALL DateienStatus();CALL StatusText('');CALL UnLockProg();RETURN;AutoDatei:;Abbruch=0;QuelleNEU=1;AutoDateien=0;CALL LockProg();CALL StatusText('Lese Verzeichniss ...');CALL ExAll(Dateien.Drawer||'/'||Pattern,'out.* TYPE 124');CALL StatusText('Ermittle Dateien ...');CALL OpenGauge();CALL TR_SetAttribute(gaugewin,2000,TROB_Progress,out.0);DO i=1 TO out.0;Abbruch=Abbrechen(2001);IF Abbruch==1 THEN LEAVE i;CALL TR_SetAttribute(gaugewin,2000,TRAT_Value,i);IF INDEX(UPPER(out.i.Prot),'A')==0&out.i.Type=='FILE' THEN;DO;AutoDateien=AutoDateien+1;Dateien.AutoDateien=out.i.name;END;END i;DROP out.;Dateien.0=AutoDateien;CALL DateienStatus();IF Abbruch==1 THEN CALL StatusText('Abgebrochen');ELSE CALL StatusText('');CALL TR_CLOSEPROJECT(gaugewin);gaugewin=NULL;CALL UnLockProg();RETURN;SetzeArchiv:;CALL StatusText('Setze Archiv-Bits ...');IF (SetArchiv=='ON')&(ii-1==ModulListe.0) THEN;DO j=1 TO Dateien.0;CALL EXECUTE('PROTECT' AddPart(Dateien.Drawer,Dateien.j) '+A');END;CALL StatusText('');RETURN;ZielVerzeichnis:;CALL LockProg();ZielDir=RqtFileReq('',ZielDir,' TITLE "Zielverzeichnis auswählen:" Flags NOFILES');CALL TestZielDir();CALL UnLockProg();RETURN;TestZielDir:;IF EXISTS(ZielDir) THEN CALL StatusText('');ELSE ZielDir='';IF SameLock(ZielDir, Dateien.Drawer)='SAME' THEN;DO;ZielDir='';CALL Beep();CALL StatusText('Quell und Zielverzeichnis müssen verschieden sein!');END;CALL TR_SetAttribute(mainwin,110,'TROB_String',ZielDir);RETURN '"'||ZielDir||'"';StartOK:;IF Dateien.0=0 THEN;DO;CALL StatusText('Zuerst Datei(en) auswählen!');RETURN 0;END;CALL TestZielDir();IF ZielDir='' THEN;DO;CALL StatusText('Zuerst ein Zielverzeichnis wählen!');RETURN 0;END;RETURN 1;Start:;IF ModulListe.1=='AUTO_SELECT' THEN CALL AutoDatei();ModulNr_Alt=ModulNr;Dateien.ERROR=0;Cached=0;Iter=0;IF StartOK() THEN;DO;CALL LockProg();Cursor1=TR_GetAttribute(mainwin,115,'TRAT_Value');CALL OpenGauge();CALL TR_SetAttribute(gaugewin,2000,TROB_Progress,Dateien.0);DO ii=1 TO ModulListe.0;CALL TR_SetAttribute(mainwin,115,'TRAT_Value',ii-1);ModOnce=0;IF INDEX(ModulListe.ii,')') ~==0 THEN ITERATE;ModulNr=ii;CALL SelModNr();MdTyp=Modul.ModulNr.Typ;MdArt=Modul.ModulNr.Art;CALL TR_SetAttribute(gaugewin,0,'TRWI_TITLE',Modul.ModulNr);DO i=1 TO Dateien.0;IF Dateien.i=='' THEN ITERATE;Stopp=Abbrechen(2001);IF Stopp==1 THEN LEAVE i;IF Cached==1 THEN;DO;QuellVerzeichnis=CacheOld;ZielVerzeichnis=CacheNew||'/';END;ELSE;DO;QuellVerzeichnis= Dateien.Drawer;ZielVerzeichnis=ZielDir;END;Datei=AddPart(QuellVerzeichnis, Dateien.i);StDatei=AddPart( Dateien.Drawer, Dateien.i);ZielDatei=AddPart(ZielVerzeichnis, Dateien.i);IF MdArt<5|MdArt==1000|(MdArt==5&Cached=1) THEN;DO;CALL TR_SetAttribute(gaugewin,2000,TRAT_Value,i);Mod=Para.ModulPfad||Modul.ModulNr;CALL StatusText(StDatei);INTERPRET('ModResult = "'||Mod||'"( Datei,ZielDatei,Mod,Dateien.Drawer,Prefs )');PARSE VAR ModResult ModRC","ModSIGL;IF ModRC>=2 THEN;DO;CALL ModError(Mod||'.rexx',ModRC,ModSIGL);LEAVE i;END;END;ELSE;DO;CALL SelIntFunc();IF ModOnce==1 THEN;DO;CALL TR_SetAttribute(gaugewin,2000,TRAT_Value,Dateien.0);LEAVE i;END;END;Stopp=FALSE;END i;IF Stopp==1 THEN LEAVE ii;END ii;CALL SetzeArchiv();CALL TR_CLOSEPROJECT(gaugewin);gaugewin=NULL;CALL TR_SetAttribute(mainwin,115,'TRAT_Value',Cursor1);CALL StatusText('Fertig!');CALL UnLockProg();END;ModulNr=ModulNr_Alt;IF ToFront=='ON' THEN CALL ProjectToFront(mainwin);RETURN;CheckTyp:PROCEDURE EXPOSE MdTyp HTMLScan;PARSE ARG Datei;DateiOK=0;Type=EXAMINEDT(Datei,,var);SELECT;WHEN MdTyp=0 THEN;DO;IF (Type=='ascii')&(OPEN(TestDatei, Datei,"R")==1) THEN;DO I=0 TO HTMLScan;Zeile=UPPER(READLN(TestDatei));IF INDEX(Zeile,'<HTML>') ~=0 THEN;DO;DateiOK=1;LEAVE;END;END;CALL CLOSE(TestDatei);END;WHEN MdTyp=1 THEN;DO;IF (Type=='ascii')&(OPEN(TestDatei, Datei,"R")==1) THEN;DO;Zeile=READLN(TestDatei);IF INDEX(Zeile,'/*') ~=0 THEN DateiOK=1;END;CALL CLOSE(TestDatei);END;WHEN MdTyp=2 THEN;IF Type=='AmigaGuide' THEN DateiOK=1;WHEN MdTyp=100 THEN;IF Type=='ascii' THEN DateiOK=1;OTHERWISE NOP;END;RETURN DateiOK;COMPRESSION:PROCEDURE;PARSE ARG In,Out;IF EXISTS(In)&EXISTS(Out) THEN;DO;CALL Examine(In,'in.');CALL Examine(Out,'out.');IF In.Size>0&Out.Size>0 THEN;Cmpr=In.Size/Out.Size*100-100;ELSE Cmpr=0;END;ELSE RETURN 0;RETURN Cmpr;SelModNr:PROCEDURE EXPOSE Modul. ModulListe. ModulNr;ModTMP=STRIP(TRANSLATE(ModulListe.ModulNr,'','()'));i1=0;i2=Modul.0;DO WHILE(i2>0);i1=i1+1;i2=i2-1;IF ModTMP==Modul.i1 THEN;DO;ModulNr=i1;LEAVE;END;IF ModTMP==Modul.i2 THEN;DO;ModulNr=i2;LEAVE;END;END;RETURN;ModulInformation:;ModulNr=TR_GetAttribute(mainwin,115,'TRAT_Value')+1;IF ModulListe.0 ~==0 THEN;DO;CALL SelModNr();MdTyp=Modul.ModulNr.Typ;MdArt=Modul.ModulNr.Art;vers1='';vers2='';InfoText=Para.ModulPfad||Modul.ModulNr||'.txt';vers1=Modul.ModulNr.Version1;vers2=Modul.ModulNr.Version2;IF EXISTS(InfoText) THEN;DO;CALL StemRead(InfoText,'ModulInfo.*');n=ModulInfo.0+1;ModulInfo.n='';n=ModulInfo.0+2;ModulInfo.n=vers1;n=ModulInfo.0+3;ModulInfo.n=vers2;ModulInfo.0=ModulInfo.0+3;END;ELSE;DO;ModulInfo.0=4;ModulInfo.1=ModulTyp.MdTyp ModulArt.MdArt;ModulInfo.2='';ModulInfo.3=vers1;ModulInfo.4=vers2;END;END;ELSE ModulInfo.0=0;IF infowin ~==NULL THEN;DO;IF ModulListe.0 ~==0 THEN;CALL TR_SetAttribute(infowin,0,'TRWI_TITLE',Modul.ModulNr);ELSE;CALL TR_SetAttribute(infowin,0,'TRWI_TITLE','');CALL TR_SetAttribute(infowin,1000,'TROB_Listview',ModulInfo);END;RETURN;PluginPrefs:;IF EXEREXX(Modul.ModulNr.Prefs)==0 THEN CALL REQ('Voreinsteller nicht gefunden!');RETURN;StatusText:;PARSE ARG StText;CALL TR_SetAttribute(mainwin,200,'TRAT_Text',StText);RETURN;INIT:;NULL='00000000'X;TRUE=1;FALSE=0;app=NULL;mainwin=NULL;infowin=NULL;gaugewin=NULL;selwin=NULL;MainWinDim.=0;SelWinDim.=0;InfoWinDim.=0;ModulInfo.0=0;ModArt=1;DateiAnzahl='Keine Datei ausgewählt';StatusText='';DateiNr='';Projekt='';PrjLast=0;ZielDir='';WindowTitle=Para.appname Para.appversion;Pattern='#?';Stopp=FALSE;Dateien.0=0;Dateien.Drawer='SYS:';ModulTyp.0='HTML';ModulTyp.1='ARexx';ModulTyp.2='AmigaGuide';ModulTyp.100='ASCII';ModulTyp.1000='Intern';ModCycle.0=5;ModCycle.1=ModulTyp.0;ModCycle.2=ModulTyp.1;ModCycle.3=ModulTyp.2;ModCycle.4=ModulTyp.100;ModCycle.5=ModulTyp.1000;ModulArt.0='Compressor';ModulArt.1='Decompressor';ModulArt.5='Preprozessor';ModulArt.1000='extern';ModulArt.1001='intern';ModulListe.0=0;WinBits='0,0';PropFont.ta_name='Xen.font';PropFont.ta_ysize=9;FixFont.ta_name='Xen.font';FixFont.ta_ysize=9;PARSE SOURCE . . . FullName .;CALL SplitPath(FullName,"Out.");Para.ProgDir=Out.DirPart;Para.ProgName=Out.FilePart;Para.ModulPfad=AddPart(Para.ProgDir,'Plugins/');Para.ProjectDir=AddPart(Para.ProgDir,'Projects/');IF ~EXISTS(Para.ProjectDir) THEN CALL EXECUTE('MAKEDIR' Para.ProjectDir,'dummy.*');IF ~EXISTS(Para.ModulPfad) THEN;DO;CALL REQ('Plugins in:' Para.ProgDir 'not found!'||'0A'X||'Leaving Programm!',,Para.appname);CALL Ende();EXIT 20;END;CALL ToolTypes();CacheDir=AddPart(CachePfad,'CompressHTML_'||PRAGMA('ID'));CacheOld=CacheDir||'/Cache';CacheNew=CacheDir||'/Buffer';CacheMod=CacheDir||'/Plugins';IF EXECUTE('MakeDir' CacheDir,'dummy.*') THEN;DO;CALL EXECUTE('MakeDir' CacheMod,'dummy.*');CALL EXECUTE('MakeDir' CacheOld,'dummy.*');CALL EXECUTE('MakeDir' CacheNew,'dummy.*');CALL EXECUTE('COPY ' Para.ModulPfad||'#? TO' CacheMod,'dummy.*');END;IF EXISTS(CacheMod) THEN Para.ModulPfad=CacheMod||'/';ELSE;DO;CALL REQ('Can not produce Cache!'||'0A'X||'Leaving Programm!');EXIT 20;END;app=TR_CREATEAPP('TRCA_Name' '"'Para.appname'"' 'TRCA_LongName' '"'Para.applongname'"' 'TRCA_Info' '"'Para.appinfo'"' 'TRCA_Version' '"'Para.appversion'"' 'TRCA_Release' '"'Para.apprelease'"' 'TRCA_Date' '"'Para.appdate'"' 'TAG_END');CALL ModulCheck();CALL ReadPrefs();CALL MainWin();CALL GaugeWindow();CALL InfoWin();CALL ModulSelWin();IF Template.0==0 THEN CALL TR_SetAttribute(mainwin,50,'TRAT_Disabled',1);CALL MakeInfo();IF SetArchiv=='OFF' THEN CALL TR_SetAttribute(mainwin,99,'TRAT_Disabled',1);IF Projekt ~=='' THEN;DO;CALL ReadProject(Projekt);CALL NewProject();CALL ModulInformation();END;IF WinBit1=='1' THEN CALL OpenSelWin();IF WinBit2=='1' THEN CALL OpenInfoWin();RETURN;WriteProject:;PARSE ARG Projekt;PARSE VAR Projekt Datei '.' ProjektPattern;IF ProjektPattern ~=='¶' THEN Projekt= Datei||'.¶';IF OPEN(ProjectDatei,Projekt,'W') THEN;DO;CALL WRITELN(ProjectDatei,'SRC     = "'|| Dateien.Drawer||'"');CALL WRITELN(ProjectDatei,'DEST    = "'||ZielDir||'"');CALL WRITELN(ProjectDatei,'PATTERN = "'||Pattern||'"');CALL WRITELN(ProjectDatei,'FUNC');DO i=1 TO ModulListe.0;CALL WRITELN(ProjectDatei,'"'ModulListe.i'"');END;CALL WRITELN(ProjectDatei,'ENDFUNC');CALL CLOSE(ProjectDatei);CALL StatusText('Projekt gespeichert.');END;ELSE CALL StatusText('Fehler beim Speichern!');RETURN;AddModul:PROCEDURE EXPOSE selwin mainwin HTML_Modul. ARexx_Modul. Guide_Modul. ASCII_Modul. Func_Modul. ModulListe. ModArt;Nr=TR_GetAttribute(selwin,3000,'TRAT_Value')+1;LNr=TR_GetAttribute(mainwin,115,'TRAT_Value')+1;ModulListe.0=ModulListe.0+1;SELECT;WHEN ModArt=1 THEN Md=HTML_Modul.Nr;WHEN ModArt=2 THEN Md=ARexx_Modul.Nr;WHEN ModArt=3 THEN Md=Guide_Modul.Nr;WHEN ModArt=4 THEN Md=ASCII_Modul.Nr;WHEN ModArt=5 THEN Md=Func_Modul.Nr;OTHERWISE NOP;END;DO i=ModulListe.0 TO LNr BY-1;prev=i-1;ModulListe.i=ModulListe.prev;END;ModulListe.LNr=Md;CALL TR_SetAttribute(mainwin,115,'TROB_Listview',ModulListe);RETURN;ReplModul:PROCEDURE EXPOSE selwin mainwin HTML_Modul. ARexx_Modul. Guide_Modul. ASCII_Modul. Func_Modul. ModulListe. ModArt;IF ~REQ('Wirklich ersetzen?','_Ja|_Nein TITLE "Rückfrage" FLAGS NoReturnKey') THEN RETURN;ELSE;DO;FNr=TR_GetAttribute(selwin,3000,'TRAT_Value')+1;LNr=TR_GetAttribute(mainwin,115,'TRAT_Value')+1;SELECT;WHEN ModArt=1 THEN ModulListe.LNr=HTML_Modul.FNr;WHEN ModArt=2 THEN ModulListe.LNr=ARexx_Modul.FNr;WHEN ModArt=3 THEN ModulListe.LNr=Guide_Modul.FNr;WHEN ModArt=4 THEN ModulListe.LNr=ASCII_Modul.FNr;WHEN ModArt=5 THEN ModulListe.LNr=Func_Modul.FNr;OTHERWISE NOP;END;CALL TR_SetAttribute(mainwin,115,'TROB_Listview',ModulListe);END;RETURN;DelModul:PROCEDURE EXPOSE mainwin ModulListe.;IF ~REQ('Wirklich entfernen?','_Ja|_Nein TITLE "Rückfrage" FLAGS NoReturnKey') THEN RETURN;ELSE;DO;MNr=TR_GetAttribute(mainwin,115,'TRAT_Value')+1;ModulListe.0=ModulListe.0-1;DO i=MNr TO ModulListe.0;next=i+1;ModulListe.i=ModulListe.next;END;IF ModulListe.0<0 THEN ModulListe.0=0;CALL TR_SetAttribute(mainwin,115,'TROB_Listview',ModulListe);END;RETURN;ModulDown:PROCEDURE EXPOSE mainwin ModulListe.;MNr=TR_GetAttribute(mainwin,115,'TRAT_Value')+1;IF MNr<ModulListe.0 THEN;DO;next=Mnr+1;swap=ModulListe.next;ModulListe.next=ModulListe.Mnr;ModulListe.Mnr=swap;CALL TR_SetAttribute(mainwin,115,'TROB_Listview',ModulListe);CALL TR_SetAttribute(mainwin,115,'TRAT_Value',next-1);END;RETURN;ModulUp:PROCEDURE EXPOSE mainwin ModulListe.;MNr=TR_GetAttribute(mainwin,115,'TRAT_Value')+1;IF MNr>1 THEN;DO;prev=Mnr-1;swap=ModulListe.prev;ModulListe.prev=ModulListe.Mnr;ModulListe.Mnr=swap;CALL TR_SetAttribute(mainwin,115,'TROB_Listview',ModulListe);CALL TR_SetAttribute(mainwin,115,'TRAT_Value',prev-1);END;RETURN;ModulON_OFF:PROCEDURE EXPOSE mainwin ModulListe.;MNr=TR_GetAttribute(mainwin,115,'TRAT_Value')+1;IF INDEX(ModulListe.MNr,')')==0 THEN;ModulListe.MNr='('ModulListe.MNr')';ELSE;ModulListe.MNr=STRIP(TRANSLATE(ModulListe.MNr,'','()'));CALL TR_SetAttribute(mainwin,115,'TROB_Listview',ModulListe);RETURN;ChangeModLst:PROCEDURE EXPOSE selwin HTML_Modul. Guide_Modul. ARexx_Modul. ASCII_Modul. Func_Modul. ModArt;PARSE ARG ModArt;DROP ModulListe.;SELECT;WHEN ModArt=1 THEN;DO i=0 TO HTML_Modul.0;ModulListe.i=HTML_Modul.i;END;WHEN ModArt=2 THEN;DO i=0 TO ARexx_Modul.0;ModulListe.i=ARexx_Modul.i;END;WHEN ModArt=3 THEN;DO i=0 TO Guide_Modul.0;ModulListe.i=Guide_Modul.i;END;WHEN ModArt=4 THEN;DO i=0 TO ASCII_Modul.0;ModulListe.i=ASCII_Modul.i;END;WHEN ModArt=5 THEN;DO i=0 TO Func_Modul.0;ModulListe.i=Func_Modul.i;END;OTHERWISE NOP;END;CALL TR_SetAttribute(selwin,3000,'TROB_Listview',ModulListe);RETURN;ReadProject:;PARSE ARG Projekt;k=0;IF OPEN(ProjektDatei,Projekt,'R') THEN;DO WHILE ~EOF(ProjektDatei);Zeile=READLN(ProjektDatei);PARSE VAR Zeile Parameter '=' '"'Argument'"';Parameter=STRIP(UPPER(Parameter));Argument=STRIP(Argument);SELECT;WHEN (Parameter=='SRC')&EXISTS(Argument) THEN Dateien.Drawer=Argument;WHEN (Parameter=='DEST')&EXISTS(Argument) THEN ZielDir=Argument;WHEN Parameter=='PATTERN' THEN Pattern=Argument;OTHERWISE NOP;END;IF Parameter=='FUNC' THEN;DO WHILE(Parameter ~=='ENDFUNC')&~EOF(ProjektDatei);Zeile=READLN(ProjektDatei);PARSE VAR Zeile '"'Plugin'"';DO j=1 TO Modul.0;IF Plugin==Modul.j THEN;DO;k=k+1;ModulListe.k=Modul.j;END;IF Plugin=='('Modul.j')' THEN;DO;k=k+1;ModulListe.k='('Modul.j')';END;END;END;ModulListe.0=k;END;CALL CLOSE(ProjektDatei);RETURN;ToolTypes:;CachePfad='T:';HTMLScan=2;QuitVerify=FALSE;ToFront='OFF';CALL GetDiskObj(FullName,'icon.');IF icon.count ~==0 THEN;DO;IF StemSearch('CACHEDIR=#?','icon. out.') THEN;DO;Pfad=STRIP(REPLACE(out.0,'CACHEDIR=',''));IF EXISTS(Pfad) THEN CachePfad=Pfad;DROP Pfad;END;DROP out.;IF StemSearch('DEFPROJECT=#?','icon. out.') THEN;DO;Datei=STRIP(REPLACE(out.0,'DEFPROJECT=',''));IF Datei=='PREV' THEN PrjLast=1;ELSE;DO;Datei=AddPart(Para.ProjectDir,Datei);IF EXISTS( Datei)& Datei ~=='' THEN Projekt= Datei;END;DROP Datei;END;DROP out.;IF StemSearch('TEMPLATE=#?','icon. out.*') THEN;DO i=1 TO out.0 FOR 10;Template.i=STRIP(REPLACE(out.i,'TEMPLATE=',''));END i;Template.0=out.0;DROP out.;IF StemSearch('SETARCHIV=#?','icon. out.') THEN;DO;Found=STRIP(REPLACE(out.0,'SETARCHIV=',''));IF Found=='ON' THEN SetArchiv='ON';ELSE SetArchiv='OFF';DROP Found;END;DROP out.;IF StemSearch('HTMLSCAN=#?','icon. out.') THEN;DO;Nr=STRIP(REPLACE(out.0,'HTMLSCAN=',''));IF DATATYPE(Nr,'NUMERIC')==TRUE&Nr>=2 THEN HTMLScan=Nr;DROP Nr;END;DROP out.;IF StemSearch('QUITVERIFY=#?','icon. out.') THEN;DO;Quit=STRIP(REPLACE(out.0,'QUITVERIFY=',''));IF Quit=='ON' THEN QuitVerify=TRUE;DROP Quit;END;DROP out.;IF StemSearch('TOFRONT=#?','icon. out.') THEN;DO;Found=STRIP(REPLACE(out.0,'TOFRONT=',''));IF Found=='ON' THEN ToFront='ON';ELSE ToFront='OFF';DROP Found;END;DROP out.;IF StemSearch('P_FONT=#?','icon. out.') THEN;DO;Found=STRIP(REPLACE(out.0,'P_FONT=',''));IF Found ~==''&EXISTS(AddPart('FONTS:',Found));THEN PropFont.ta_name=Found;DROP Found;END;DROP out.;IF StemSearch('P_SIZE=#?','icon. out.') THEN;DO;Nr=STRIP(REPLACE(out.0,'P_SIZE=',''));IF DATATYPE(Nr,'NUMERIC') THEN PropFont.ta_ysize=Nr;DROP Nr;END;DROP out.;IF StemSearch('F_FONT=#?','icon. out.') THEN;DO;Found=STRIP(REPLACE(out.0,'F_FONT=',''));IF Found ~==''&EXISTS(AddPart('FONTS:',Found));THEN FixFont.ta_name=Found;DROP Found;END;DROP out.;IF StemSearch('F_SIZE=#?','icon. out.') THEN;DO;Nr=STRIP(REPLACE(out.0,'F_SIZE=',''));IF DATATYPE(Nr,'NUMERIC') THEN FixFont.ta_ysize=Nr;DROP Nr;END;DROP out.;END;RETURN;ModulCheck:;IF ~ExAll(Para.ModulPfad||'#?.rexx','dir.* TYPE 1') THEN NOP;DO n=1 FOR dir.0;dir.n.name=REPLACE(dir.n.name,'.rexx','');END;CALL StemSort('dir.*.name Modul.*');PluginInfoText='';HTML_Modul.0=0;ARexx_Modul.0=0;Guide_Modul.0=0;ASCII_Modul.0=0;Func_Modul.0=0;DO n=1 FOR Modul.0;Mod=AddPart(Para.ModulPfad,Modul.n||'.rexx');Voreinst=AddPArt(Para.ModulPfad,Modul.n||'_prefs.rx');CALL EXECUTE('Version' Mod 'FULL','ver.*');Modul.n.Version1=ver.1;Modul.n.Version2=ver.2;PluginInfoText=PluginInfoText||Modul.n ':' Modul.n.Version1 Modul.n.Version2||'0A'X;SIGNAL OFF ERROR;SIGNAL OFF SYNTAX;INTERPRET('Info = "'||Mod||'"( "INFO" )');SIGNAL ON ERROR;SIGNAL ON SYNTAX;PARSE VAR Info ModTyp","ModArt;IF ModTyp=='' THEN Modul.n.Typ=0;ELSE Modul.n.Typ=ModTyp;IF ModArt=='' THEN Modul.n.Art=0;ELSE Modul.n.Art=ModArt;IF EXISTS(Voreinst) THEN;DO;Modul.n.Prefs=Voreinst;Modul.n.NoPrefs=0;END;ELSE;DO;Modul.n.Prefs='';Modul.n.NoPrefs=1;END;SELECT;WHEN ModTyp=0 THEN;DO;HTML_Modul.0=HTML_Modul.0+1;n1=HTML_Modul.0;HTML_Modul.n1=Modul.n;HTML_Modul.n1.ModNr=n;END;WHEN ModTyp=1 THEN;DO;ARexx_Modul.0=ARexx_Modul.0+1;n2=ARExx_Modul.0;ARexx_Modul.n2=Modul.n;ARexx_Modul.n2.ModNr=n;END;WHEN ModTyp=2 THEN;DO;Guide_Modul.0=Guide_Modul.0+1;n3=Guide_Modul.0;Guide_Modul.n3=Modul.n;Guide_Modul.n3.ModNr=n;END;WHEN ModTyp=100 THEN;DO;ASCII_Modul.0=ASCII_Modul.0+1;n4=ASCII_Modul.0;ASCII_Modul.n4=Modul.n;ASCII_Modul.n4.ModNr=n;END;WHEN ModTyp=1000 THEN;DO;Func_Modul.0=Func_Modul.0+1;n5=Func_Modul.0;Func_Modul.n5=Modul.n;Func_Modul.n5.ModNr=n;END;OTHERWISE NOP;END;END n;DROP n1;DROP n2;DROP n3;DROP n4;DROP n5;DO n=1 TO 8;Modul.0=Modul.0+1;m=Modul.0;Func_Modul.0=Func_Modul.0+1;o=Func_Modul.0;Modul.m.Art=1001;Modul.m.Typ=1000;Modul.m.Version1='';Modul.m.Version2='';SELECT;WHEN n=1 THEN;DO;Modul.m='AUTO_SELECT';Func_Modul.o=Modul.m;Func_Modul.o.ModNr=m;END;WHEN n=2 THEN;DO;Modul.m='SRC_TO_CACHE';Func_Modul.o=Modul.m;Func_Modul.o.ModNr=m;END;WHEN n=3 THEN;DO;Modul.m='BUFFER_TO_CACHE';Func_Modul.o=Modul.m;Func_Modul.o.ModNr=m;END;WHEN n=4 THEN;DO;Modul.m='BUFFER_TO_DEST';Func_Modul.o=Modul.m;Func_Modul.o.ModNr=m;END;WHEN n=5 THEN;DO;Modul.m='COPY_TIMESTAMP';Func_Modul.o=Modul.m;Func_Modul.o.ModNr=m;END;WHEN n=6 THEN;DO;Modul.m='CLONE_SOURCEDIR';Func_Modul.o=Modul.m;Func_Modul.o.ModNr=m;END;WHEN n=7 THEN;DO;Modul.m='CHECK_FILETYPE';Func_Modul.o=Modul.m;Func_Modul.o.ModNr=m;END;WHEN n=8 THEN;DO;Modul.m='CHECK_FILETYPE_AUTO';Func_Modul.o=Modul.m;Func_Modul.o.ModNr=m;END;OTHERWISE NOP;END;END n;RETURN;SelIntFunc:;SELECT;WHEN Modul.ModulNr=='SRC_TO_CACHE' THEN CALL SRC_To_Cache();WHEN Modul.ModulNr=='BUFFER_TO_CACHE' THEN CALL Buffer_To_Cache();WHEN Modul.ModulNr=='BUFFER_TO_DEST' THEN CALL Buffer_To_Dest();WHEN Modul.ModulNr=='COPY_TIMESTAMP' THEN CALL Copy_TimeStamp();WHEN Modul.ModulNr=='CLONE_SOURCEDIR' THEN CALL Clone_SourceDir();WHEN Modul.ModulNr=='CHECK_FILETYPE' THEN CALL Check_FileType();WHEN Modul.ModulNr=='CHECK_FILETYPE_AUTO' THEN CALL Check_FileType_Auto();OTHERWISE NOP;END;RETURN;Src_To_Cache:;CALL StatusText('Bereite Cache vor ...');CALL EXECUTE('DELETE ' CacheOld||'/#?','dummy.*');CALL EXECUTE('DELETE ' CacheNew||'/#?','dummy.*');DO jj=1 TO Dateien.0;CALL TR_SetAttribute(gaugewin,2000,TRAT_Value,jj);CALL EXECUTE('COPY "'||AddPart( Dateien.Drawer, Dateien.jj)||'" TO "'||CacheOld||'" DATES','dummy.*');END;Cached=1;ModOnce=1;RETURN;Buffer_To_Cache:;IF Cached==1 THEN;DO;CALL ExAll(ZielVerzeichnis||'#?','out.*');IF out.0 ~==0 THEN;DO;CALL EXECUTE('DELETE ' QuellVerzeichnis||'/#?','dummy.*');CALL EXECUTE('COPY ' ZielVerzeichnis||' TO "'||QuellVerzeichnis||'" DATES','dummy.*');END;DROP out.;END;ModOnce=1;RETURN;Buffer_To_Dest:;IF Cached==1 THEN;DO;CALL StatusText('Speichere Dateien ...');CALL EXECUTE('COPY ' ZielVerzeichnis||' TO "'||ZielDir||'" DATES','dummy.*');CALL StatusText('');END;ModOnce=1;RETURN;Copy_TimeStamp:;CALL StatusText('Kopiere Datum und Uhrzeit ...');CALL EXAMINE(AddPart( Dateien.Drawer, Dateien.i),'ex.');CALL EXECUTE('SETDATE' AddPart(ZielVerzeichnis,Dateien.i) ex.Date ex.Time,'dummy.*');CALL StatusText('');RETURN;Clone_SourceDir:;CALL StatusText('Kopiere Sonstige Dateien ...');CALL EXECUTE('COPY "'||AddPart( Dateien.Drawer,'~('Pattern')')||'" TO "'||ZielDir||'" DATES','dummy.*');CALL StatusText('');ModOnce=1;RETURN;Check_FileType:;CALL StatusText('Teste Datei' StDatei);ModulNr_Swap=ModulNr;MDTyp_Swap=MDTyp;ModulNr=ii+1;CALL SelModNr();MdTyp=Modul.ModulNr.Typ;IF CheckTyp( Datei) ~==1 THEN;DO;IF REQ('Datei scheint keine' ModulTyp.MdTyp||'-Datei zu sein!'||'0A'X||'Kann zu Fehlern in Zieldatei führen!','_Überspringen|_Ignorieren TITLE Warnung!')==1 THEN;DO;CALL EXECUTE('COPY ' Datei 'TO "'||ZielDir||'" DATES','dummy.*');Dateien.i='';END;END;ModulNr=ModulNr_Swap;MDTyp=MDTyp_Swap;CALL StatusText('');RETURN;Check_FileType_Auto:;CALL StatusText('Teste Datei' StDatei);ModulNr_Swap=ModulNr;MDTyp_Swap=MDTyp;ModulNr=ii+1;CALL SelModNr();MdTyp=Modul.ModulNr.Typ;IF CheckTyp( Datei) ~==1 THEN;DO;CALL EXECUTE('COPY ' Datei 'TO "'||ZielDir||'" DATES','dummy.*');Dateien.i='';END;ModulNr=ModulNr_Swap;MDTyp=MDTyp_Swap;CALL StatusText('');RETURN;ReadPrefs:;PrefsFile=Para.appname||'.prefs';PrefsFile1=Para.ProgDir||PrefsFile;IF EXISTS(PrefsFile1) THEN;DO;IF OPEN(prf,PrefsFile1) THEN;DO;Zeile=READLN(prf);PARSE VAR Zeile 'WIN' '=' WinBit2','WinBit1;Zeile=READLN(prf);PARSE VAR Zeile 'LASTPRJ' '=' LastProjekt;IF PrjLast==1 THEN Projekt=LastProjekt;END;CALL CLOSE(prf);DROP Zeile;DROP prf;END;RETURN;WritePrefs:;IF infowin ~==NULL THEN WinBit1=1;ELSE WinBit1=0;IF selwin ~==NULL THEN WinBit2=1;ELSE WinBit2=0;IF OPEN(prf,PrefsFile1,'W') THEN;DO;CALL WRITELN(prf,'WIN='WinBit1','WinBit2);IF PrjLast==1 THEN CALL WRITELN(prf,'LASTPRJ='||Projekt);END;CALL CLOSE(prf);RETURN;MakeInfo:;tritonrexx_version=TritonRexxVersion();triton_version=TritonVersion();rexxMOOS_version=EXECUTE('VERSION LIBS:rexxMOOS.library','ver.*');rexxMOOS_version=REPLACE(ver.1,'.library','.library Version:');rexxlocald_version=EXECUTE('VERSION LIBS:rexxlocaldates.library','ver.*');rexxlocald_version=REPLACE(ver.1,'.library','.library Version:');ProgrammInfoText=Para.applongname||'0A'X||Para.appinfo||'0A'X||'Version:' Para.appversion||'0A'X||'0A'X||'Verwendete Bibliotheken:'||'0A'X||'triton.library Version:' triton_version||', by Stefan Zeiger'||'0A'X||'tritonrexx.library Version:' tritonrexx_version||', by Jürgen Kohrmeyer'||'0A'X||rexxMOOS_version||', by Rocco Coluccelli'||'0A'X||rexxlocald_version||', by Anders Wegge Jakobsen';RETURN;QUITREQ:;CALL LockProg();IF QuitVerify=TRUE THEN;DO;IF REQ('Programm wirklich beenden?','_Beenden|_Abbrechen TITLE "Rückfrage"')==1 THEN ende=TRUE;ELSE ende=FALSE;END;ELSE ende=TRUE;CALL UnlockProg();RETURN ende;Ende:;IF mainwin ~==NULL&app ~==NULL THEN CALL StatusText('Enferne Cache ...');CALL Execute('DELETE' CacheDir 'ALL FORCE','dummy.*');CALL DELAY(10);IF app ~==NULL THEN;DO;IF mainwin ~==NULL THEN CALL StatusText('Beende Programm ...');IF gaugewin ~==NULL THEN CALL TR_CLOSEPROJECT(gaugewin);IF infowin ~==NULL THEN CALL TR_CLOSEPROJECT(infowin);IF selwin ~==NULL THEN CALL TR_CLOSEPROJECT(selwin);IF mainwin ~==NULL THEN;DO;CALL DELAY(20);CALL TR_CLOSEPROJECT(mainwin);END;CALL WritePrefs();CALL TR_DELETEAPP(app);END;RETURN;LIBS:;ErrLib='';IF ~SHOW('L','rexxMOOS.library')&~ADDLIB('rexxMOOS.library',100,-30,0) THEN;ErrLib='Script requires rexxMOOS.library!';IF ~SHOW('L','tritonrexx.library')&~ADDLIB('tritonrexx.library',10,-30,0) THEN;ErrLib=ErrLib||'0A'X||'Script requires tritonrexx.library!';IF ~SHOW('L','rexxlocaldates.library')&~ADDLIB('rexxlocaldates.library',0,-30,0) THEN;ErrLib=ErrLib||'0A'X||'Script requires rexxlocaldates.library!';IF ~SHOW('L','datatypes.library')&~ADDLIB('datatypes.library',0,-30,0) THEN;ErrLib=ErrLib||'0A'X||'Script requires datatypes.library!';IF ErrLib ~='' THEN;DO;CALL OPEN(Ausgabe,'CON:20/20/300/100/CompressHTML/WAIT');CALL WRITELN(Ausgabe,ErrLib);CALL WRITELN(Ausgabe,'Press CTRL-\ to close!');EXIT 10;END;RETURN;Abbrechen:;PARSE ARG BrkNr;DO WHILE TR_HANDLEMSG(app,'event');IF (event.trm_class='TRMS_ACTION')&(event.trm_id=BrkNr)&REQ('Wirklich abbrechen?','_Ja|_Nein TITLE "Rückfrage" FLAGS NoReturnKey') THEN RETURN 1;END;RETURN 0;LockProg:;CALL TR_LockProject(mainwin);IF infowin ~==NULL THEN CALL TR_LockProject(infowin);IF selwin ~==NULL THEN CALL TR_LockProject(selwin);RETURN;UnLockProg:;CALL TR_UnLockProject(mainwin);IF infowin ~==NULL THEN CALL TR_UnLockProject(infowin);IF selwin ~==NULL THEN CALL TR_UnLockProject(selwin);RETURN;OpenGauge:;gaugewin=NULL;gaugewin=TR_OpenProject(app,gaugewintags);IF gaugewin ~==NULL THEN ende=0;ELSE ende=1;RETURN;OpenInfoWin:;IF infowin==NULL THEN;DO;infowin=TR_OpenProject(app,infowintags);CALL ModulInformation(ModulNr);CALL TR_SetAttribute(infowin,0,'TRWI_TITLE',Modul.ModulNr);END;ELSE;DO;CALL ProjectToFront(InfoWin);CALL ActivateProject(InfoWin);END;IF infowin ~==NULL THEN ende=0;ELSE ende=1;RETURN;OpenSelWin:;IF SelWin==NULL THEN;DO;SelWin=TR_OpenProject(app,modselwintags);CALL TR_SetAttribute(selwin,3003,'TRAT_Value',ModArt-1);CALL ChangeModLst(ModArt);END;ELSE;DO;CALL ProjectToFront(SelWin);CALL ActivateProject(SelWin);END;IF SelWin ~==NULL THEN ende=0;ELSE ende=1;RETURN;DateienStatus:;IF Dateien.0>=2 THEN DateiAnzahl= Dateien.0 'Dateien ausgewählt';ELSE;DO;IF EXISTS(AddPart( Dateien.Drawer, Dateien.1)) THEN DateiAnzahl= Dateien.0 'Datei ausgewählt';ELSE;DO;DateiAnzahl='Keine' 'Datei ausgewählt';Dateien.0=0;END;END;CALL TR_SetAttribute(mainwin,101,'TRAT_Text',DateiAnzahl);RETURN;MainWin:;IF Template.0 ~==0 THEN TemplMenue='TRMN_Item "Neu von Vorlage ..."';ELSE TemplMenue='';DO i=1 TO Template.0 FOR 10;IF i<10 THEN TemplMenue=TemplMenue 'TRMN_Sub' i'_'Template.i 'TRAT_ID' i+49;ELSE TemplMenue=TemplMenue 'TRMN_Sub' '0_'Template.i 'TRAT_ID' i+49;END i;mainwintags=WindowID(1) WindowTitle(WindowTitle) ScreenTitle(Para.applongname) WindowFlags(TRWF_ZIPTOCURRENTPOS) 'TRWI_Dimensions' MainWinDim 'TRWI_PropFontAttr' PropFont 'TRWI_FixedWidthFontAttr' FixFont BeginMenu('Projekt') MenuItem('O_Laden',1) ItemBarlabel MenuItem('N_Neu',2) TemplMenue ItemBarlabel MenuItem('S_Speichern',8) MenuItem('A_Speichern als ...',9) ItemBarlabel MenuItem('D_Löschen',10) ItemBarLabel MenuItem('Q_Beenden',19) BeginMenu('Information') MenuItem('Aktuelles Plugin',40) MenuItem('Installierte Plugins',41) ItemBarlabel MenuItem('?_Über ...',45) 'VertGroupA Space' 'HorizGroup Space' 'VertGroupA' NamedSeparator('Quell-Dateien') 'VertGroupA Space' 'HorizGroupC Space' TextN('Namensmuster') 'SpaceS' StringGadget(Pattern,102) 'Space EndGroup Space' 'HorizGroupC Space' Button('_Automatisch',99) 'SpaceB' TextN('Datei(en) auswählen') 'SpaceS' GetFileButton(100) 'Space EndGroup Space' 'HorizGroupA Space' ClippedTextBox(DateiAnzahl,101) 'Space EndGroup' 'Space EndGroup' 'Space' NamedSeparator('Zielverzeichnis') 'VertGroupAC Space' 'HorizGroup Space' StringGadget('',110) 'SpaceS' GetDrawerButton(111) 'Space EndGroup SpaceB' Button('_Start',150) 'Space EndGroup Space' 'EndGroup' 'VertGroupA' NamedSeparator('Funktionsliste') 'VertGroupA Space' 'HorizGroup Space' FWListSS(ModulListe,115,0,0) 'TRAT_MinHeight 8 TRAT_MinWidth 30' 'Space EndGroup SpaceS' 'HorizGroupE' 'Space' Button('Nach _oben',116) 'SpaceS' Button('Nach _unten',117) 'Space' 'EndGroup' 'SpaceS HorizGroupE' 'Space' Button('_Funktionen',118) 'SpaceS' Button('Entfe_rnen',119) 'Space' 'EndGroup' 'SpaceS HorizGroupE Space' Button('_Ein/Aus',120) 'Space' 'EndGroup' 'Space EndGroup' 'EndGroup Space' 'EndGroup' 'HorizSeparator Space' 'HorizGroup Space' ClippedTextBoxMW('',200,79) 'Space EndGroup' 'Space EndGroup' 'EndProject';mainwin=TR_OPENPROJECT(app,mainwintags);IF mainwin ~=NULL THEN ende=0;ELSE ende=1;RETURN;InfoWin:;infowintags=WindowID(2) ScreenTitle(Para.applongname) WindowFlags(TRWF_NOCLOSEGADGET) WindowFlags(TRWF_ZIPTOCURRENTPOS) 'TRWI_Dimensions' InfoWinDim 'TRWI_PropFontAttr' PropFont 'TRWI_FixedWidthFontAttr' FixFont 'WindowBackfillReq' 'HorizGroupEA Space' 'VertGroupEA Space' FWListRO(ModulInfo,1000,0) 'TRAT_MinHeight 10 TRAT_MinWidth 30' 'SpaceS' CenteredButton('_Schließen',1001) 'Space EndGroup' 'Space EndGroup' 'EndRequester';RETURN;ModulSelWin:;modselwintags=WindowID(3) WindowTitle('Funktionen:') ScreenTitle(Para.applongname) WindowFlags(TRWF_ZIPTOCURRENTPOS) 'TRWI_Dimensions' SelWinDim 'TRWI_PropFontAttr' PropFont 'TRWI_FixedWidthFontAttr' FixFont 'HorizGroupEA Space' 'VertGroupEA Space' CycleGadget(ModCycle,0,3003) FWListSS(HTML_Modul,3000,0,0) 'TRAT_MinHeight 10 TRAT_MinWidth 30' 'SpaceS' 'HorizGroupEA' Button('Ein_fügen',3001) 'SpaceS' Button('_Ersetzen',3004) 'SpaceS' Button('_Schließen',3002) 'EndGroup' 'Space EndGroup' 'Space EndGroup' 'EndRequester';RETURN;GaugeWindow:;DateiNr=0;BarMax=100;gaugewintags=WindowID(4) WindowTitle(Para.appname'                ') ScreenTitle(Para.applongname) WindowFlags(TRWF_NOCLOSEGADGET) WindowFlags(TRWF_ZIPTOCURRENTPOS) 'TRWI_PropFontAttr' PropFont 'WindowBackfillReq' 'VertGroupA Space' 'HorizGroup Space' 'VertGroupA' 'GroupBox  TRAT_Backfill TRBF_WINDOWBACK' 'VertGroupA Space' 'HorizGroupC' 'Space' TextN('0%') 'SpaceS' Progress(BarMax,DateiNr,2000) 'SpaceS' TextN('100%') 'Space' 'EndGroup Space' 'EndGroup Space' 'HorizGroupEA' CenteredButton('_Abbrechen',2001) 'Space' 'EndGroup' 'EndGroup Space' 'EndGroup Space' 'EndGroup Space' 'EndProject';RETURN;REQ:PROCEDURE;PARSE ARG txt,gads,title;args='';IF gads~=='' THEN args=args 'GADS' gads;IF title~=='' THEN args=args 'TITLE' title;RETURN RqtEasyReq(txt,args 'REQPOS Pointer');EXEREXX:PROCEDURE;PARSE ARG Prog;IF EXISTS(Prog) THEN;DO;CALL OPEN(File,Prog);Str=READCH(File,65000);INTERPRET(Str);CALL CLOSE(File);END;ELSE RETURN 0;RETURN 1;REPLACE:PROCEDURE;PARSE ARG src,old,new;str='';DO WHILE ''~=src;loc=POS(old,src);PARSE VAR src sub (old) src;str=str||sub;IF loc~=0 THEN str=str||new;END;RETURN str;TOGGLE:PROCEDURE;PARSE ARG i;IF i=0 THEN o=1;ELSE o=0;RETURN o;ModError:PROCEDURE;PARSE ARG Modul,ModRC,ModSIGL;IF EXISTS(Modul) THEN;DO;CALL OPEN(File,Modul);DO i=1 TO ModSIGL;Code=READLN(File);END;CALL SplitPath(Modul,'Out.');Modul=Out.FilePart;IF LENGTH(Code)>50 THEN;DO;Code=LEFT(Code,50)||' ...';Code=':'||'0A'X||'0A'X||Code;END;ELSE Code=':'||'0A'X||'0A'X||Code;END;ELSE Code='';CALL RqtEasyReq('Fehler in Modul:' Modul||'0A'X||ERRORTEXT(ModRC)||', in Zeile' ModSIGL||STRIP(Code));RETURN;BREAK_C:;CALL RqtEasyReq('User Break!');CALL Ende();EXIT 10;HALT:;CALL RqtEasyReq('Execution stopped!');CALL Ende();EXIT 10;ERROR:;SYNTAX:;IOERR:;CALL RqtEasyReq('ERROR:' ERRORTEXT(RC) 'in line:' SIGL);CALL Ende();EXIT 20